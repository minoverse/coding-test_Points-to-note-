Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

 

Example 1:

Input: s = "abcabc"
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "abc", "abca", "abcab", "abcabc", "bca", "bcab", "bcabc", "cab", "cabc" and "abc" (again). 
Example 2:

Input: s = "aaacb"
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are "aaacb", "aacb" and "acb". 
Example 3:

Input: s = "abc"
Output: 1
 

Constraints:

3 <= s.length <= 5 x 10^4
s only consists of a, b or c characters.

//Solution lets sue sloding window  consider r side not l 

class Solution {
public:
    int numberOfSubstrings(string s) {
         int a_pos = -1, b_pos = -1, c_pos = -1;
        long long total = 0;
        for (int r = 0; r < (int)s.size(); ++r) {
            if (s[r] == 'a') a_pos = r;
            else if (s[r] == 'b') b_pos = r;
            else c_pos = r;

            if (a_pos != -1 && b_pos != -1 && c_pos != -1) {
                int m = min(a_pos, min(b_pos, c_pos)); // or min({a_pos,b_pos,c_pos})
                total += (m + 1);
            }
        }
        return (int)total;
    }
};
